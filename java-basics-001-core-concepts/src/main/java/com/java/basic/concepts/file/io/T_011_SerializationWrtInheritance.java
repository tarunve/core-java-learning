package com.java.basic.concepts.file.io;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

/**
 * 	CASE 1:
 * 	------
 * 	->	Even though child class doesn't implement Serializable, we can serialize child class object
 * 		if parent class implements Serializable interface i.e Serializable nature is inheriting from
 * 		parent to child. Hence, if parent is serializable then by default, every child is serializable.
 *
 *  CASE 2:
 *  ------
 *  ->	Even though parent class doesn't implement Serializable, we can serialize child class object
 * 		if child class implements Serializable interface i.e to serialize child class object, parent
 * 		class need not to implement Serializable.
 * 	->	At the time of serialization, JVM will check if any variable is inheriting from non-serializable
 * 		parent or not. if yes, JVM will ignore original value and save default value to file.
 * 	->	At the time of de-serialization, JVM will check if any parent class is non-serializable or not.
 * 		If found any, JVM will execute instance control flow in every non-serializable parent and
 * 		share its instance variable to the current object.
 * 	->	While executing instance control flow of non-serializable parent, JVM will always call no-arg
 * 		constructor. Hence, every non-serializable class should compulsory contain no-arg constructor.
 * 		It may be default constructor generated by compiler or customized explicitly provided by
 * 		programmer otherwise we will get RE:InvalidClassException.
 */
public class T_011_SerializationWrtInheritance {

	private static final String FILE_LOCATION = "abc.ser";
	/*
	 * Case 1
	 */
	public static class TestClass1 {

		public static class Animal implements Serializable {
			
			private static final long serialVersionUID = 1L;
			int i = 10;
		}
		
		public static class Dog extends Animal {
			
			private static final long serialVersionUID = 1L;
			int j = 20;
		}
		
		public static void main(String[] args) throws IOException, ClassNotFoundException {
			Dog d = new Dog();
			FileOutputStream fos = new FileOutputStream(FILE_LOCATION);
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(d);
			oos.close();
			System.out.println("Deserialization started..");
			FileInputStream fis = new FileInputStream(FILE_LOCATION);
			ObjectInputStream ois = new ObjectInputStream(fis);
			Dog d2 = (Dog) ois.readObject();
			System.out.println(d2.i + "=======" + d2.j);
			ois.close();
		}
	}

	/*
	 * Case 2
	 */
	public static class TestClass2 {
		
		public static class Test {
			int k = 40;

			public Test() {
				System.out.println("Test constructor called");
			}
		}

		public static class Animal extends Test {
			
			int i = 10;
			
			public Animal() {
				System.out.println("Animal COnstructor called");
			}
		}
		
		public static class Dog extends Animal implements Serializable {
			
			private static final long serialVersionUID = 1L;
			int j = 20;
			
			public Dog() {
				System.out.println("Dog constructor called");
			}
		}
		
		public static void main(String[] args) throws IOException, ClassNotFoundException {
			Dog d = new Dog();
			d.i = 999;
			d.j = 888;
			FileOutputStream fos = new FileOutputStream(FILE_LOCATION);
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(d);
			oos.close();
			System.out.println("Deserialization started..");
			FileInputStream fis = new FileInputStream(FILE_LOCATION);
			ObjectInputStream ois = new ObjectInputStream(fis);
			Dog d2 = (Dog) ois.readObject();
			System.out.println(d2.i + "=======" + d2.j + "========" + d2.k);
			ois.close();
		}
	}
}
